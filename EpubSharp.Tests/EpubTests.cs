using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using EpubSharp.Format;


namespace EpubSharp.Tests
{
    [TestClass]
    public class EpubTests
    {
        [TestMethod]
        public void ReadWriteEpub30Test()
        {
            var archives = Utils.ZipAndCopyEpubs(Cwd.Combine(@"Samples/epub30"));
            ReadWriteTest(archives);
        }

        [TestMethod]
        public void ReadWriteEpub31Test()
        {
            var archives = Utils.ZipAndCopyEpubs(Cwd.Combine(@"Samples/epub31"));
            ReadWriteTest(archives);
        }

        [TestMethod]
        public void ReadWriteEpubAssortedTest()
        {
            var archives = Utils.ZipAndCopyEpubs(Cwd.Combine(@"Samples/epub-assorted"));
            ReadWriteTest(archives);
        }

        private void ReadWriteTest(List<string> archives)
        {
            foreach (var archive in archives)
            {
                var originalEpub = EpubReader.Read(archive);

                var stream = new MemoryStream();
                EpubWriter.Write(originalEpub, stream);
                stream.Seek(0, SeekOrigin.Begin);
                var savedEpub = EpubReader.Read(stream, false);

                AssertEpub(originalEpub, savedEpub);
            }
        }

        private void AssertEpub(EpubBook expected, EpubBook actual)
        {
            Assert.IsNotNull(expected);
            Assert.IsNotNull(actual);

            Assert.Equals(expected.Title, actual.Title);

            AssertPrimitiveCollection(expected.Authors, actual.Authors, nameof(actual.Authors));

            Assert.Equals(expected.CoverImage == null, actual.CoverImage == null);
            if (expected.CoverImage != null && actual.CoverImage != null)
            {
                Assert.IsTrue(expected.CoverImage.Length > 0, "Expected CoverImage.Length > 0");
                Assert.IsTrue(actual.CoverImage.Length > 0, "Actual CoverImage.Length > 0");
                Assert.Equals(expected.CoverImage.Length, actual.CoverImage.Length);
            }

            AssertContentFileCollection(expected.Resources.Css, actual.Resources.Css);
            AssertContentFileCollection(expected.Resources.Fonts, actual.Resources.Fonts);
            AssertContentFileCollection(expected.Resources.Html, actual.Resources.Html);
            AssertContentFileCollection(expected.Resources.Images, actual.Resources.Images);
            AssertContentFileCollection(
                // Filter some format related files, because they often are not byte-by-byte the same when are generated by the writers.
                expected.Resources.Other.Where(e => e.FileName != expected.Format.Opf.FindNcxPath()),
                actual.Resources.Other.Where(e => e.FileName != expected.Format.Opf.FindNcxPath())
            );
            AssertCollection(expected.SpecialResources.HtmlInReadingOrder, actual.SpecialResources.HtmlInReadingOrder, (old, @new) =>
            {
                AssertContentFile(old, @new);
            });

            AssertCollection(expected.TableOfContents, actual.TableOfContents, AssertChapter);

            AssertOcf(expected.Format.Ocf, actual.Format.Ocf);
            AssertOpf(expected.Format.Opf, actual.Format.Opf);
            AssertNcx(expected.Format.Ncx, actual.Format.Ncx);
            AssertNav(expected.Format.Nav, actual.Format.Nav);
        }

        private void AssertCollectionWithIndex<T>(IEnumerable<T> expected, IEnumerable<T> actual, Action<List<T>, List<T>, int> assert)
        {
            Assert.Equals(expected == null, actual == null);
            if (expected != null && actual != null)
            {
                var old = expected.ToList();
                var @new = actual.ToList();

                Assert.Equals(old.Count, @new.Count);

                for (var i = 0; i < @new.Count; ++i)
                {
                    assert(old, @new, i);
                }
            }
        }

        private void AssertCollection<T>(IEnumerable<T> expected, IEnumerable<T> actual, Action<T, T> assert)
        {
            AssertCollectionWithIndex(expected, actual, (a, b, i) =>
            {
                assert(a[i], b[i]);
            });
        }

        private void AssertPrimitiveCollection<T>(IEnumerable<T> expected, IEnumerable<T> actual, string unitName)
        {
            AssertCollectionWithIndex(expected, actual, (a, b, i) =>
            {
                Assert.IsTrue(a.Contains(b[i]), unitName);
            });
        }

        private void AssertContentFileCollection<TContent>(Dictionary<string, TContent> expected, Dictionary<string, TContent> actual)
            where TContent : EpubFile
        {
            AssertCollection(expected, actual, (a, b) =>
            {
                Assert.Equals(a.Key, b.Key);
                AssertContentFile(a.Value, b.Value);
            });
        }

        private void AssertContentFileCollection<TContent>(IEnumerable<TContent> expected, IEnumerable<TContent> actual)
            where TContent : EpubFile
        {
            AssertCollection(expected, actual, (a, b) =>
            {
                AssertContentFile(a, b);
            });
        }

        private void AssertContentFile(EpubFile expected, EpubFile actual)
        {
            Assert.IsTrue(expected.Content.SequenceEqual(actual.Content));
            Assert.Equals(expected.ContentType, actual.ContentType);
            Assert.Equals(expected.FileName, actual.FileName);
            Assert.Equals(expected.MimeType, actual.MimeType);

            var castedOld = expected as EpubTextFile;
            var castedNew = actual as EpubTextFile;
            Assert.Equals(castedOld == null, castedNew == null);
            if (castedOld != null && castedNew != null)
            {
                Assert.Equals(castedOld.TextContent, castedNew.TextContent);
            }
        }

        private void AssertChapter(EpubChapter expected, EpubChapter actual)
        {
            Assert.Equals(expected.Anchor, actual.Anchor);
            Assert.Equals(expected.FileName, actual.FileName);
            Assert.Equals(expected.Title, actual.Title);

            Assert.Equals(expected.SubChapters.Count, actual.SubChapters.Count);
            for (var i = 0; i < expected.SubChapters.Count; ++i)
            {
                AssertChapter(expected.SubChapters[i], actual.SubChapters[i]);
            }
        }

        private void AssertOcf(OcfDocument expected, OcfDocument actual)
        {
            // There are some epubs with multiple root files.
            // i.e. 1 normal and 1 for braille.
            // We don't have multiple root file support, therefore Take(1) for now.
            // Currently it is also assumed that the first root file is the main root file.
            // This is a dangerous assumption.
            AssertCollection(expected.RootFiles.Take(1), actual.RootFiles, (a, b) =>
            {
                Assert.Equals(a.FullPath, b.FullPath);
                Assert.Equals(a.MediaType, b.MediaType);
            });
            Assert.Equals(expected.RootFilePath, actual.RootFilePath);
        }

        private void AssertOpf(OpfDocument expected, OpfDocument actual)
        {
            Assert.Equals(expected == null, actual == null);
            if (expected != null && actual != null)
            {
                Assert.Equals(expected.UniqueIdentifier, actual.UniqueIdentifier);
                Assert.Equals(expected.EpubVersion, actual.EpubVersion);

                Assert.Equals(expected.Metadata == null, actual.Metadata == null);
                if (expected.Metadata != null && actual.Metadata != null)
                {
                    AssertCreators(expected.Metadata.Creators, actual.Metadata.Creators);
                    AssertCreators(expected.Metadata.Contributors, actual.Metadata.Contributors);

                    AssertCollection(expected.Metadata.Dates, actual.Metadata.Dates, (a, b) =>
                    {
                        Assert.Equals(a.Text, b.Text);
                        Assert.Equals(a.Event, b.Event);
                    });

                    AssertCollection(expected.Metadata.Identifiers, actual.Metadata.Identifiers, (a, b) =>
                    {
                        Assert.Equals(a.Id, b.Id);
                        Assert.Equals(a.Scheme, b.Scheme);
                        Assert.Equals(a.Text, b.Text);
                    });

                    AssertCollection(expected.Metadata.Metas, actual.Metadata.Metas, (a, b) =>
                    {
                        Assert.Equals(a.Id, b.Id);
                        Assert.Equals(a.Name, b.Name);
                        Assert.Equals(a.Property, b.Property);
                        Assert.Equals(a.Refines, b.Refines);
                        Assert.Equals(a.Scheme, b.Scheme);
                        Assert.Equals(a.Text, b.Text);
                    });

                    AssertCollection(expected.Metadata.Identifiers, actual.Metadata.Identifiers, (a, b) =>
                    {
                        Assert.Equals(a.Id, b.Id);
                        Assert.Equals(a.Scheme, b.Scheme);
                        Assert.Equals(a.Text, b.Text);
                    });

                    AssertPrimitiveCollection(expected.Metadata.Coverages, actual.Metadata.Coverages, "Coverage");
                    AssertPrimitiveCollection(expected.Metadata.Descriptions, actual.Metadata.Descriptions, "Description");
                    AssertPrimitiveCollection(expected.Metadata.Languages, actual.Metadata.Languages, "Language");
                    AssertPrimitiveCollection(expected.Metadata.Publishers, actual.Metadata.Publishers, "Publisher");
                    AssertPrimitiveCollection(expected.Metadata.Relations, actual.Metadata.Relations, "Relation");
                    AssertPrimitiveCollection(expected.Metadata.Rights, actual.Metadata.Rights, "Right");
                    AssertPrimitiveCollection(expected.Metadata.Sources, actual.Metadata.Sources, "Source");
                    AssertPrimitiveCollection(expected.Metadata.Subjects, actual.Metadata.Subjects, "Subject");
                    AssertPrimitiveCollection(expected.Metadata.Titles, actual.Metadata.Titles, "Title");
                    AssertPrimitiveCollection(expected.Metadata.Types, actual.Metadata.Types, "Type");
                }

                Assert.Equals(expected.Guide == null, actual.Guide == null);
                if (expected.Guide != null && actual.Guide != null)
                {
                    AssertCollection(expected.Guide.References, actual.Guide.References, (a, b) =>
                    {
                        Assert.Equals(a.Title, b.Title);
                        Assert.Equals(a.Type, b.Type);
                        Assert.Equals(a.Href, b.Href);
                    });
                }

                Assert.Equals(expected.Manifest == null, actual.Manifest == null);
                if (expected.Manifest != null && actual.Manifest != null)
                {
                    AssertCollection(expected.Manifest.Items, actual.Manifest.Items, (a, b) =>
                    {
                        Assert.Equals(a.Fallback, b.Fallback);
                        Assert.Equals(a.FallbackStyle, b.FallbackStyle);
                        Assert.Equals(a.Href, b.Href);
                        Assert.Equals(a.Id, b.Id);
                        Assert.Equals(a.MediaType, b.MediaType);
                        Assert.Equals(a.RequiredModules, b.RequiredModules);
                        Assert.Equals(a.RequiredNamespace, b.RequiredNamespace);
                        AssertPrimitiveCollection(a.Properties, b.Properties, "Item.Property");
                    });
                }

                Assert.Equals(expected.Spine == null, actual.Spine == null);
                if (expected.Spine != null && actual.Spine != null)
                {
                    Assert.Equals(expected.Spine.Toc, actual.Spine.Toc);
                    AssertCollection(expected.Spine.ItemRefs, actual.Spine.ItemRefs, (a, b) =>
                    {
                        Assert.Equals(a.Id, b.Id);
                        Assert.Equals(a.IdRef, b.IdRef);
                        Assert.Equals(a.Linear, b.Linear);
                        AssertPrimitiveCollection(a.Properties, b.Properties, "ItemRef.Property");
                    });
                }

                Assert.Equals(expected.FindCoverPath(), actual.FindCoverPath());
                Assert.Equals(expected.FindNavPath(), actual.FindNavPath());
                Assert.Equals(expected.FindNcxPath(), actual.FindNcxPath());
            }
        }

        private void AssertCreators(IEnumerable<OpfMetadataCreator> expected, IEnumerable<OpfMetadataCreator> actual)
        {
            AssertCollection(expected, actual, (a, b) =>
            {
                Assert.Equals(a.AlternateScript, b.AlternateScript);
                Assert.Equals(a.FileAs, b.FileAs);
                Assert.Equals(a.Role, b.Role);
                Assert.Equals(a.Text, b.Text);
            });
        }

        private void AssertNcx(NcxDocument expected, NcxDocument actual)
        {
            Assert.Equals(expected == null, actual == null);
            if (expected != null && actual != null)
            {
                Assert.Equals(expected.DocAuthor, actual.DocAuthor);
                Assert.Equals(expected.DocTitle, actual.DocTitle);

                AssertCollection(expected.Meta, actual.Meta, (a, b) =>
                {
                    Assert.Equals(a.Name, b.Name);
                    Assert.Equals(a.Content, b.Content);
                    Assert.Equals(a.Scheme, b.Scheme);
                });

                Assert.Equals(expected.NavList == null, actual.NavList == null);
                if (expected.NavList != null && actual.NavList != null)
                {
                    Assert.Equals(expected.NavList.Id, actual.NavList.Id);
                    Assert.Equals(expected.NavList.Class, actual.NavList.Class);
                    Assert.Equals(expected.NavList.Label, actual.NavList.Label);

                    AssertCollection(expected.NavList.NavTargets, actual.NavList.NavTargets, (a, b) =>
                    {
                        Assert.Equals(a.Id, b.Id);
                        Assert.Equals(a.Class, b.Class);
                        Assert.Equals(a.Label, b.Label);
                        Assert.Equals(a.PlayOrder, b.PlayOrder);
                        Assert.Equals(a.ContentSource, b.ContentSource);
                    });
                }

                AssertCollection(expected.NavMap.NavPoints, actual.NavMap.NavPoints, (a, b) =>
                {
                    Assert.Equals(a.Id, b.Id);
                    Assert.Equals(a.PlayOrder, b.PlayOrder);
                    Assert.Equals(a.NavLabelText, b.NavLabelText);
                    Assert.Equals(a.Class, b.Class);
                    Assert.Equals(a.ContentSrc, b.ContentSrc);
                    AssertNavigationPoints(a.NavPoints, b.NavPoints);
                });

                Assert.Equals(expected.PageList == null, actual.PageList == null);
                if (expected.PageList != null && actual.PageList != null)
                {
                    AssertCollection(expected.PageList.PageTargets, actual.PageList.PageTargets, (a, b) =>
                    {
                        Assert.Equals(a.Id, b.Id);
                        Assert.Equals(a.Class, b.Class);
                        Assert.Equals(a.ContentSrc, b.ContentSrc);
                        Assert.Equals(a.NavLabelText, b.NavLabelText);
                        Assert.Equals(a.Type, b.Type);
                        Assert.Equals(a.Value, b.Value);
                    });
                }
            }
        }

        private void AssertNavigationPoints(IEnumerable<NcxNavPoint> expected, IEnumerable<NcxNavPoint> actual)
        {
            AssertCollection(expected, actual, (a, b) =>
            {
                Assert.Equals(a.Id, b.Id);
                Assert.Equals(a.Class, b.Class);
                Assert.Equals(a.ContentSrc, b.ContentSrc);
                Assert.Equals(a.NavLabelText, b.NavLabelText);
                Assert.Equals(a.PlayOrder, b.PlayOrder);
                Assert.Equals(a.NavPoints == null, b.NavPoints == null);
                if (a.NavPoints != null && b.NavPoints != null)
                {
                    AssertNavigationPoints(a.NavPoints, b.NavPoints);
                }
            });
        }

        private void AssertNav(NavDocument expected, NavDocument actual)
        {
            Assert.Equals(expected == null, actual == null);
            if (expected != null && actual != null)
            {
                Assert.Equals(expected.Head == null, actual.Head == null);
                if (expected.Head != null && actual.Head != null)
                {
                    Assert.Equals(expected.Head.Title, actual.Head.Title);
                    AssertCollection(expected.Head.Links, actual.Head.Links, (a, b) =>
                    {
                        Assert.Equals(a.Class, b.Class);
                        Assert.Equals(a.Href, b.Href);
                        Assert.Equals(a.Rel, b.Rel);
                        Assert.Equals(a.Title, b.Title);
                        Assert.Equals(a.Type, b.Type);
                        Assert.Equals(a.Media, b.Media);
                    });

                    AssertCollection(expected.Head.Metas, actual.Head.Metas, (a, b) =>
                    {
                        Assert.Equals(a.Charset, b.Charset);
                        Assert.Equals(a.Name, b.Name);
                        Assert.Equals(a.Content, b.Content);
                    });
                }

                Assert.Equals(expected.Body == null, actual.Body == null);
                if (expected.Body != null && actual.Body != null)
                {
                    Assert.Equals(expected.Body.Dom == null, actual.Body.Dom == null);
                    AssertCollection(expected.Body.Navs, actual.Body.Navs, (a, b) =>
                    {
                        Assert.Equals(a.Dom == null, b.Dom == null);
                        Assert.Equals(a.Class, b.Class);
                        Assert.Equals(a.Hidden, b.Hidden);
                        Assert.Equals(a.Id, b.Id);
                        Assert.Equals(a.Type, b.Type);
                    });
                }
            }
        }
    }
}
